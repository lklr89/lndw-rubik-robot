
- compress_solution should be aware of slices

- tommyhash this should help with speed and memory. Test against the following.
    It takes 25s and 589M of memory today. It also takes 800ms to load the step30 table.
    http://www.tommyds.it/doc/tommyhashtbl_8h
    https://github.com/amadvance/tommyds/

    time ./ida_search --kociemba .RFLL.F....BB....BD....RF....F.BLUR..UDUR.L.LL.LFLxLxUULLxLBL.Lx.L.BDBD..LBRF.B.xx.UDxLLxRFLLLLLB.xL.D.BURB..RLUU.D....DR....LR....RF....R.RBBB..DDFR.D.Lx.UFxLLxRFLxxLDL.xL.L.UBFF..FDUU.F.Lx.RFxxxxLLxxxLLD.Lx.U.DDUU. --type 6x6x6-LR-inner-x-centers-oblique-edges-stage --orbit1-need-even-w

- delete all exit_asap code

- delete all heuristic_stats code

- 555 step10
    - find a solution where the step10 + step20 cost is 18 or less
    - stop using IDA for step20, use the full table

- 666 step60 IDAViaC

- cube state via bitfield
    - gprof first to find out if the rotate() is the bottleneck. I did, rotate() shows up on the
      radar but the calculating of the pt state to get the heurisic is the bigger bottleneck.
      bitfield would make that much faster though, you could get the pt_state via a bunch of bitshifts.
    - 555 step10 is "slow" (~4s) for this one...test with it
        - FLDDRDRFDRBUUURDLRBFBULLLUUFBFUURUULURBDRFBBFULFBLDBBBFLRDFFDLFBUURUUFLDUFRBFRRBUDDLBFBDRUDDFFRDRBRBUBUBRLFFLUDLLDFDBLRBFFLRUDLLURRLRUFRDBFBLBLDLDDRDL

- make these consistent
    edge vs edges
    center vs centers
    step vs move
    group vs stage
    class names
    method names

- 666 centers...someday if we have bitfield rotate and if ida_search.c is EXTREMELY fast
  look into putting LR in horizontal bars and UD in vertical bars in a single phase. This
  would be 70^4/70^8 or 0.000 000 041 but we would have multiple targets and two 70^4 prune
  tables so it might be doable.
